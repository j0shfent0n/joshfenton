# Create a Technique class with attributes name, belt_level, position (e.g., guard, mount), and difficulty.
# Create a BJJLog class that allows practitioners to add techniques learned, track progress on each, and filter techniques by position or difficulty.
# Implement a method to display all logged techniques and group them by the belt level for easy review.

#Techniques learned at classes
class Technique():
    def __init__(self, date, position, technique):
        self.date = date
        self.position = position
        self.technique = technique

    def __str__(self):
        return f'Current log: {self.date}, {self.position}, {self.technique}' 
    
#log of techniques from class
class BJJTechniques():
    def __init__(self):
        self.log = []
        self.back_attack = []
        self.back_escape = []
        self.guard = []
        self.submission = []
        self.guardpass = []
        self.sidecontrol_escape = []
        self.sidecontrol_attack = []
        self.turtle_attack = []
        self.turtle_esc = []
        self.takedowns = []
        self.mount =[]
        self.mount_escape = []

    def __repr__(self):
        return f'Current log: {self.date}, {self.position}, {self.technique}' 


#create other methods - add other sections (escapes, back, guard, passing, submissions, etc.)

       #add technique to your training log
    def add_technique(self, session):
        self.log.append(session)
        #Confirm the session has been added to trainng log
        print(f'{session.date}, {session.position}, {session.technique}\nThe above has been added to you training log ')

    #remove technique from your training log
    def remove_technique(self, session):
        self.log.remove(session)
        #confirm the session has been removed from the training log
        print((f'{session.date}, {session.position}, {session.technique}\nThe above has been removed from your training log '))

    
    #add session to back attack section
    def add_back_attack(self, session):
        self.log.append(session)
        self.back_attack.append(session)

        #print the date and the technique that has been added to back attack training log
        print(f'Date: {session.date}, Technique: {session.technique} has been added to your back log ')

        #print sessions that have been logged in the training log
        print(f'Your complete training log contains the following sessions: ')
        for session in self.log:
            print(f'{session.date}, {session.technique}')

        #print back technique training log
        print(f'Your back attck training log consists of the following: ')    
        for session in self.back_attack:
            print(f'{session.date}, {session.technique}')

    def add_back_escape(self,session):
        self.log.append(session)
        self.back_escape.append(session)

        #print the date and the technique that have been added to back escape training log
        print(f'{session.technique} has been added to your back escape log')

        #print back escapes log
        print('Your back escape log consists of the following escapes: ')
        for session in self.back_escape:
            print(f'{session.date}, {session.technique}')

       
    #add to guard play
    def add_guard(self,session):
        self.log.append(session)
        self.guard.append(session)
        #confirm the entry has been added to the log
        print(f'Date: {session.date}, Technique: {session.technique} has been added to your guard log ')

        #print guard log
        print('Your guard log consists of the following entries: ')
        for session in self.guard:
            print(f'Date: {session.date}, Technique: {session.technique}')

        #print all entries
        print('Your training log consists of these entries: ')
        for session in self.log:
            print(f'Date: {session.date}, Technique: {session.technique}')


    #add guard pass
    def add_guard_pass(self, guard_pass):
        self.log.append(guard_pass)
        self.guardpass.append(guard_pass)

        #Confirm gurad pass was added to guard pass log
        print(f'{guard_pass.technique} was added to your guard pass log ')

        #print guard pass log
        print('Your guard pass log has the following passes: ')
        for guard_pass in self.guardpass:
            print(f'Date: {guard_pass.date}, Technique: {guard_pass.technique}')

        #print entire entry log
        print('Your training log consists of the following entries: ')
        for guard_pass in self.log:
            print(f'{guard_pass.date}, {guard_pass.technique}')


    #add to mount
    def add_mount(self, mount):
        self.log.append(mount)
        self.mount.append(mount)

    #mount attack was added to mount log
        print(f'{mount.technique} was added to your top mount log ')

    #print mount attack log
        print('Your mount attacks have the following techniques: ')
        for mount in self.mount:
            print(f'Date: {mount.date}, Technique: {mount.technique} ')

    #print entire training log
        print('Your training log consists of the following entries: ')
        for mount in self.log:
            print(f'{mount.date}, {mount.technique}')


    #add mount escape
    def add_mount_escape(self, escape):
        self.log.append(escape)
        self.mount_escape.append(escape)

        #print mount escape was added to mount escape log
        print(f'{escape.technique} has been added to your mount escapes ')

        #print mount escape log
        print('Your mount escapes include the following techniques: ')
        for escape in self.mount_escape:
            print(f'Date: {escape.date}, Technique: {escape.technique}')

        #print complete training log
        print('Your training log consists of the following techniques: ')
        for escape in self.log:
            print(f'Date: {escape.date}, Technique: {escape.technique}')

     
    #add to side control attack
    def side_control_attack(self, attack):
        self.log.append(attack)
        self.sidecontrol_attack.append(attack)

        #print your side control attack has been added to your side control log
        print(f'{attack.technique} has been added to your side control attack log ')

        #print entire side control attack log
        print('Your side control attack log contains the following attacks: ')
        for attack in self.sidecontrol_attack:
            print(f'Date: {attack.date} Technique: {attack.technique}')

        #print entire training log

        print('Your training log has the following techniques: ')
        for attack in self.log:
            print(f'Date: {attack.date} Technique: {attack.technique}')

    def side_control_escape(self, escape):
        self.log.append(escape)
        self.sidecontrol_escape.append(escape)
        print(f'{escape.technique} has been added to your mount escapes ')

        #print side control escape log
        print('Your mount escapes include the following techniques: ')
        for escape in self.mount_escape:
            print(f'Date: {escape.date}, Technique: {escape.technique}')

        #print complete training log
        print('Your training log consists of the following techniques: ')
        for escape in self.log:
            print(f'Date: {escape.date}, Technique: {escape.technique}')
       

     #add to turtle attack
    def side_control_attack(self, attack):
        self.log.append(attack)
        self.turtle_attack.append(attack)

        #print your side control attack has been added to your side control log
        print(f'{attack.technique} has been added to your turtle attack log ')

        #print entire turtle attack log
        print('Your turtle attack log contains the following attacks: ')
        for attack in self.sidecontrol_attack:
            print(f'Date: {attack.date} Technique: {attack.technique}')

        #print entire training log

        print('Your training log has the following techniques: ')
        for attack in self.log:
            print(f'Date: {attack.date} Technique: {attack.technique}')

    def turtle_escape(self, escape):
        self.log.append(escape)
        self.turtle_esc.append(escape)
        print(f'{escape.technique} has been added to your turtle escapes ')

        #print turtle escape log
        print('Your turtle escapes include the following techniques: ')
        for escape in self.mount_escape:
            print(f'Date: {escape.date}, Technique: {escape.technique}')

        #print complete training log
        print('Your training log consists of the following techniques: ')
        for escape in self.log:
            print(f'Date: {escape.date}, Technique: {escape.technique}')


    #add to takedowns
    def add_takedown(self,takedown):
        self.log.append(takedown)
        self.takedowns.append(takedown)

        #Confirm takedown has been added to takedown training log
        print(f'{takedown.technique} has been added to your training log ')

        #print entire takedown log
        print('Your takedown log consist of the following takedowns: ')
        for takedown in self.takedowns:
            print(f'Date: {takedown.date}, Technique: {takedown.technique}')

        #print entire training log
        print('Your training log consists of the following entries: ')
        for takedown in self.log:
            print(f'Date: {takedown.date}, Technique: {takedown.technique}')

    

#class to track bjj ranking (i.e. stripes, promotions, etc.)
class BJJRank():
    def __init__(self):
        self.white = []
        self.blue = []
        self.purple = []
        self.brown = []
        self.black = []

    #add stripe to white belt
    def white_belt(self):
        # ask user how many stripes they have
        stripe = int(input('How many stripes did you get? '))

        #congragulate user on stripes
        if stripe == 1:
            print(f'Congrats on getting {stripe} stripe! ')
        elif stripe > 1 and stripe < 4:
            print(f'Congrats on getting {stripe} stripes! ')
        else: 
            print('Please enter a valid number ')

        #add stripes to self.white
        self.white.append(stripe)
        
        #users total number of stripes
        total_stripes = sum(self.white)
        print(f'You have a total of {total_stripes} on your white belt! ')

        #how many more stripes until promotion
        if total_stripes >= 4:
            print('You have 4 stripes, it\s time to rank up! ')
        else: 
            print(f'Keep going! Only {4-total_stripes} stripes until you get promoted! ')


        
    #add stripe to blue belt
    def blue_belt(self):

        # ask user how many stripes they have
        stripe = int(input('How many stripes did you get? '))

        #congragulate user on stripes
        if stripe == 1:
            print(f'Congrats on getting {stripe} stripe! ')
        elif stripe > 1 and stripe < 4:
            print(f'Congrats on getting {stripe} stripes! ')
        else: 
            print('Please enter a valid number ')

        #add stripes to self.blue
        self.blue.append(stripe)
        
        #users total number of stripes
        total_stripes = sum(self.blue)
        print(f'You have a total of {total_stripes} on your blue belt! ')

        #how many more stripes until promotion
        if total_stripes >= 4:
            print('You have 4 stripes, it\s time to rank up! ')
        else: 
            print(f'Keep going! Only {4-total_stripes} stripes until you get promoted! ')

    #add stripe to purple belt
    def purple_belt(self):
        # ask user how many stripes they have
        stripe = int(input('How many stripes did you get? '))

        #congragulate user on stripes
        if stripe == 1:
            print(f'Congrats on getting {stripe} stripe! ')
        elif stripe > 1 and stripe < 4:
            print(f'Congrats on getting {stripe} stripes! ')
        else: 
            print('Please enter a valid number ')

        #add stripes to self.blue
        self.purple.append(stripe)
        
        #users total number of stripes
        total_stripes = sum(self.purple)
        print(f'You have a total of {total_stripes} on your purple belt! ')

        #how many more stripes until promotion
        if total_stripes >= 4:
            print('You have 4 stripes, it\s time to rank up! ')
        else: 
            print(f'Keep going! Only {4-total_stripes} stripes until you get promoted! ')

    
    #add striple to brown belt
    def brown_belt(self):
        # ask user how many stripes they have
        stripe = int(input('How many stripes did you get? '))

        #congragulate user on stripes
        if stripe == 1:
            print(f'Congrats on getting {stripe} stripe! ')
        elif stripe > 1 and stripe < 4:
            print(f'Congrats on getting {stripe} stripes! ')
        else: 
            print('Please enter a valid number ')

        #add stripes to self.blue
        self.brown.append(stripe)
        
        #users total number of stripes
        total_stripes = sum(self.brown)
        print(f'You have a total of {total_stripes} on your brown belt! ')

        #how many more stripes until promotion
        if total_stripes >= 4:
            print('You have 4 stripes, it\s time to rank up! ')
        else: 
            print(f'Keep going! Only {4-total_stripes} stripes until you get promoted! ')

    
    #add striple to black belt
    def black_belt(self):
        pass

#Feedback from what coaches give you
class Coach_feedback():
    pass

#Injuries suffered throughout bjj (include injury, time off mat, what you did to stay in shape (if possible/when possible))
class Injuries():
    pass

#Track your sparring sessions with your partner (include sparring partner, legnth of round, comp/no comp roll, gi/no gi, notes)
class Sparring_Notes():
    pass

technique1 = Technique('9/1/2024','closed guard', 'closed guard sweep')
technique2 = Technique('9/3/2024', 'back attack', 'rear naked choke')
technique3 = Technique('9/5/2024', 'back escape', 'knee to elbow escape')
technique4= Technique('9/7/2024', 'guard retention', 'closed guard retention')
technique5 = Technique('9/9/2024', 'guard pass', 'knee cut')
technique6 = Technique('9/9/2024', 'mount', 'arm triangle')
technique7 = Technique('9/10/2024', 'mount escape', 'bridge')
technique8 = Technique('9/11/2024', 'takedown', 'single leg')


log = BJJTechniques()

log.add_technique(technique1)
#log.remove_technique(technique1)
log.add_back_attack(technique2)
log.add_back_escape(technique3)
log.add_guard(technique4)
log.add_guard_pass(technique5)
log.add_mount(technique6)
log.add_mount_escape(technique7)
log.add_takedown(technique8)

belt = BJJRank()
belt.white_belt()

#add another class for training log that tracks submission, time rolled, notes vs each opponent
#add another class that provides recommended techniques
#the app needs to make people want to continue using the app, people need to stay on the app
